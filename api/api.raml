#%RAML 0.8
title: Impresa Luna
version: 1
baseUri: https://{enviroment}.{domain}/{contextPath}/api/v{version}
baseUriParameters:
 domain:
   displayName: domain
   description: Dominio dedicato
   example: impresaluna.it
 enviroment:
   displayName: enviroment
   description: Ambiente produzione/staging
   minLength: 3
   example: dev
 contextPath:
   displayName: context
   description: Contesto
   type: string
   pattern: ^[a-zA-Z0-9][-a-zA-Z0-9]*$
   minLength: 1
   example: imprese-eg

protocols: [ HTTPS ]

mediaType: application/json

securitySchemes:
  - basicSecurityLayer:
      type: x-{other}
      description: Layer di sicurezza di base (pensare a JWT)
      describedBy:
        headers:
          X-Authorization:
            description: Campo nell'header con HMAC di sicurezza
            type: string
          X-Client:
            description: identificativo della chiave da usare per la validazione
            type: string
        protocols: [ HTTPS ]
        responses:
          401:
              description: |
                  Bad or expired token. This can happen if the user or Dropbox
                  revoked or expired an access token. To fix, you should re-
                  authenticate the user.
          403:
              description: |
                  Bad request (wrong consumer key, bad nonce, expired
                  timestamp...).
          404:
            description: Unauthorized #TO THINK 404 non e' bellissimo da pensare
      settings:
        scopes:
          - "todo/to think"
  - oauth:
      description: Supporto a OAuth 2.0 per l'autenticazione delle richieste via API.
      type: OAuth 2.0
      settings:
        accessTokenUri: org/oauth/token
        authorizationUri: org/oauth/authorize
        authorizationGrants: [code,token]
        scopes:
          - "READ_RESOURCE"
          - "POST_RESOURCE"
          - basic
          - comments
          - relationships
          - likes

resourceTypes:
  - base:
      get?: &common
        headers:
          X-Retry-Count:
            description: |
              How many retry call are made
            type: integer
        responses:
          429:
            description: |
              API retry limit exceeded. See #TODO: url con spiegazione
              for details.
          423:
            description: |
              locked account, please contact customer. #TODO: mail customer
      post?: *common
      patch?: *common #TODO: lo usiamo?
      put?: *common
      delete?: *common

traits:
  - filterable:
      queryParameters:
        sort:
          enum:
            - created
            - updated
            - comments
          default: created
          required: true

documentation:
  - title: Intro
    content: |
      Welcome to the Api Example Documentation. The Example API allows you
      to do stuff. See also [example.com](https://www.example.com). #TODO fix link

schemas:
 - Iso8601:         !include schemas/iso8601.json
 - GelfMessage:     !include schemas/gelfMessage.json
 - SystemStatus:    !include schemas/systemStatus.json
 - ServiceState:    !include schemas/serviceState.json
 - ClientInfo:      !include schemas/clientInfo.json
 - Login:           !include schemas/login.json
 - CredentialInfo:  !include schemas/credentialInfo.json
 - Part:            !include schemas/part.json
 - SinglePart:      !include schemas/singlePart.json
 - UserInfo:        !include schemas/userInfo.json
 - Ticket:          !include schemas/ticket.json
 - Badge:           !include schemas/badge.json
 - BadgeList:       !include schemas/badgeList.json
 - RequestBadge:    !include schemas/badgeRequest.json
 - TicketList:      !include schemas/ticketList.json

/status:
  type: base
  get:
   description:
     stato del sistema
   responses:
     200:
       body:
         application/json:
           schema: SystemStatus

/badge:
  type: base
  get:
     description: 'ID: Ottenere elenco dei badge' #TODO assegnare ID
     queryParameters:
         filterBy:
             type: string
             enum: [specialita,brevetti,events]
     responses:
       200:
         description: elenco badge
         body:
           application/json:
             schema: BadgeList

  /proposal:
    post:
      description: |
        proposta di un nuovo badge
      securedBy:
        - basicSecurityLayer
      body:
        application/json:
          schema: RequestBadge # va approfondito la parte di contact
      responses:
        202:
          description: |
            dato che richiede un intervento umano di controllo verrà restituito un ticket
            che verrà preso in carico e processato in maniera asyncrona
          body:
            application/json:
              schema: Ticket #TODO: fare il metodo per i ticket -> proposte extra sistema?
        208:
          description: |
            il badge esiste gia'
          body:
            application/json:
              schema: GelfMessage

/security:
   /login:
     type: base
     description: 'ID: 01 Autenticazione'
     post:
       description:
         autenticazione necessaria x poter dialogare con il server
       body:
         application/json:
           schema: Login
       responses:
           200:
             body:
               application/json:
                 schema: CredentialInfo
           302:
             description: |
              redirect alla /security/callback?authMode=Facebook nel caso Facebook
           400:
             body:
               application/json:
                 schema: GelfMessage
           403:
             body:
               application/json:
                 schema: GelfMessage

   /confirm:
     type: base
     get:
       description: |
          conferma ricezione email
       queryParameters:
         confirmKey:
           description: chiave per confermare l'avenuta ricezione email
           example: a1b2c3
           required: true
           type: string
       responses:
         200:
           description: |
              Welcome page

   /logout:
       type: base
       get:
         description: 'ID: 01 Autenticazione'
         securedBy:
           - basicSecurityLayer

   /callback:
       type: base
       description: |
         ID: 01 Autenticazione
       get:
          description: Per la Oauth authentication
          queryParameters:
           authMode:
             description: tipo di oauth
             example: facebook
             required: true
             type: string
          responses:
            201:
                description: Tutto ok
                body:
                    application/json:
                        schema: CredentialInfo
            412:
                description: Qualcosa e' fallito nel giro
                body:
                    application/json:
                        schema: GelfMessage

/user:
  /signup:
      type: base
      description: |
        ID Registrazione, permette di registrarsi o con mail o con facebook #TODO: id da assegnare
      post:
          queryParameters:
            authMode:
              description: tipo di oauth
              example: Facebook
              required: true
              enum:
                - Facebook
                - Email
          body:
            application/json:
              schema: Login
          responses:
            302:
              description: redirect a /security/callback?authMode=Email

  /{id}:
      type: base
      get:
          description: 'ID: Ottenere la carta di Specialità/Competenza di un utente' #TODO assegnare ID
          securedBy:
          - basicSecurityLayer
          responses:
            200:
              body:
                application/json:
                  # TODO: da trasformare skills in un oggetto!!!
                  schema: UserInfo

      /badge:
          type: base
          description: Sezione Badge Utente
          post:
              description: 'ID aggiungere un badge (specialità/brevetto)'
              securedBy:
                - basicSecurityLayer
          /{id_badge}:
              type: base
              get:
                 description: immagine badge corrente per l'utente
                 securedBy:
                   - basicSecurityLayer
              put:
                  description: 'ID  segnare completata una specialità o un brevetto o aggiungere uno spicchio' #TODO assegnare ID
                  securedBy:
                    - basicSecurityLayer
              delete:
                  description: 'ID cancellare una specialità non ancora completata' #TODO assegnare ID
                  securedBy:
                    - basicSecurityLayer
      /ticket:
        type: base
        get:
          description: |
            ticket attivi per l'utente
          securedBy:
            - basicSecurityLayer
          responses:
            200:
              description: |
                ticket attivi #TODO: inserimento a mano su db
              body:
                application/json:
                  example: '[{ "id": 1, "message": "HTML MESSAGE", "url": "http://", "priority": "low" }]'
                  schema: TicketList
            204:
              description: |
                nessun ticket

/workspace:
    type: base
    post:
        description: |
          ID: 02 Aggiungere una impresa
        securedBy:
          - basicSecurityLayer
        body:
            application/json:
                example: !include examples/workspace.post.json
        responses:
            201:
                body:
                    application/json:
                        example: '{"id":1}'
            400:
                description: Qualcosa manca nel json
            412:
                description: Manca qualche precondizione
            409:
                description: Conflitto
    get:
        is: [ filterable ]
        description: |
          ID: visualizzare elenco imprese #TODO assegnare ID
        securedBy:
          - basicSecurityLayer
        responses:
            200:
                body:
                    application/json:
                        example: !include examples/workspace_list.get.json
            404:
                description: non trovato
            451:
                description: non disponibile per ragioni legali
    /join:
        type: base
        post:
            description: 'ID: 03 Aggiungere nuovi membri'
            securedBy:
              - basicSecurityLayer
            body:
                application/json:
                  example: !include examples/workspace.id.join.json
            responses:
                200:
                    body:
                        application/json:
                            example: '{"id":1}'
    /{id}:
        type: base
        uriParameters:
          id:
            description: Id of the workspace.
            type: integer
        get:
            description: |
              ID: 02 Visualizzare una impresa
            queryParameters:
                lastUpdate:
                  description: richiesta di verifica aggiornamento, rispetto alla data YYYYMMDD
                  example: 20160927
                  required: false
                  type: string
            securedBy:
              - basicSecurityLayer
            responses:
                200:
                  body:
                      application/json:
                          example: !include examples/workspace.get.id.json
                204:
                  description: nessuna novita (rispetto al lastUpdate)
                404:
                    description: file non trovato
        put:
            description: 'ID: 02 Modificare una impresa'
            securedBy:
              - basicSecurityLayer
            body:
                application/json:
                    example: !include examples/workspace.post.json
            responses:
                204:
        delete:
            description: 'ID: 02 Cancellare una impresa'
            securedBy:
              - basicSecurityLayer
            responses:
                204:

        #Per ottenere il qr-code come png
        /share:
            type: base
            get:
                description: 'ID: 03 Aggiungere nuovi membri'
                securedBy:
                  - basicSecurityLayer
                responses:
                    200:
                        body:
                            application/json:
                              example: !include examples/workspace.id.share.json
                    404:
                      body:
                        application/json:
                          schema: GelfMessage

        /part:
            type: base
            post:
                description: |
                   ID 04 Aggiunge un momento del racconto
                   può essere di varie tipologie, testo, foto, video, audio
                   caricate con un'altra api e referenziate attraverso una ref
                   gli elementi devono essere prima versati e poi descritti in json della post.
                securedBy:
                  - basicSecurityLayer
                body:
                    application/json:
                      schema: SinglePart
                      example: !include examples/workspace.id.part.json
                responses:
                    201:
                        body:
                            application/json:
                              schema: Part
            /{id_part}:
                get:
                    description: |
                      ID: 04 Richiedere una parte del racconto specifica
                    securedBy:
                      - basicSecurityLayer
                    queryParameters:
                        lastUpdate:
                          description: richiesta di verifica aggiornamento, rispetto alla data YYYYMMDD
                          example: 20160927
                          required: false
                          type: string
                    responses:
                        200:
                            description: restituisce tutte le risorse correlate
                            body:
                                application/json:
                                  schema: Part
                                  example: !include examples/workspace.id.part.get.json
                        204:
                          description: nessuna modifica (dal lastUpdate)
                        404:
                          description: non trovato
                put:
                    description: |
                      ID: 04 Modifricare una parte del racconto
                    securedBy:
                      - basicSecurityLayer
                    body:
                        application/json:
                            example: !include examples/workspace.id.part.json
                    responses:
                        204:
                delete:
                    description: |
                      ID: 04 Cancellare una parte del racconto
                    securedBy:
                      - basicSecurityLayer
                    responses:
                        204:
                patch:
                    description: |
                      Notifica parte letta dall'utente
                    securedBy:
                      - basicSecurityLayer
                    responses:
                      205:
                        description: Part marked as read.
                /checkin:
                    type: base
                    post:
                        description: |
                          ID indicare la presenza ad un evento (Io c'ero) #TODO assegnare ID
                        securedBy:
                          - basicSecurityLayer
                        responses:
                            201:
                                body:
                                    application/json:
                                        example: '{"points":50}' #TODO ragionare se notificare un messaggio sull aggiunta di spicchi al profilo
                    delete:
                        description: Cancellare la dichiarata presenza di un evento.
                        securedBy:
                          - basicSecurityLayer
                        responses:
                            204:
        /export:
            type: base
            get:
                description: "ID: 06 Esportare l'impresa"
                securedBy:
                  - basicSecurityLayer
                queryParameters:
                    type:
                        type: string
                        enum: [pdf,zip,json]
                responses:
                    200:
                        body:
                            application/json:
                              #TODO ma in realtà è un pdf O_Os!
/stream:
    type: base
    post:
        description: |
                    Permette di caricare una parte del racconto come stream
                    testo, audio, video, foto.
        securedBy:
            - basicSecurityLayer
