global
	#log /dev/log	local0 debug

  # log <address> [len <length>] [format <format>] <facility> [max level [min level]]
  # /dev/log server per rsyslod - facility: local0|local1 - log level : debug|info|notice

  #ACCESSLOG
  log /dev/log local0

  # OTHER LOG
  log /dev/log local1 notice

	chroot /var/lib/haproxy

	maxconn {{ haproxy_max_connection }}

  # not good idea with global stick!
  nbproc {{ haproxy_core_number }}

	tune.ssl.default-dh-param 2048
	user haproxy
	group haproxy
	daemon

  maxcompcpuusage 80

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	#  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
	ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS
	ssl-default-bind-options no-sslv3 no-tlsv10 no-tls-tickets force-tlsv12

  # statistiche
  # stats socket <path> [{uid | user} <uid>] [{gid | group} <gid>] [mode <mode>] [level <level>]
  stats socket /var/run/haproxy.sock mode 600 level user
  stats timeout 2m #Wait up to 2 minutes for input

  #stats socket /var/lib/haproxy/stats1 uid 0 gid 0 mode 0440 level admin process 1


defaults
	log	global
	mode	http

	option  forwardfor except 127.0.0.1

  # deny client persistent connections without keepalive
	option	http-server-close

  # better for proxy http
  option httplog
  {% if haproxy_dontlog_normal %}

  # Successful connections will not be logged => non viene creato haproxy-access.log (configurato su rsyslog)
  option dontlog-normal
  {% endif %}

  #option dontlognull

  # Added to create separate error and access logs
	option log-separate-errors

  # any change of the health check status or to the server's health will be logged
  option log-health-checks

  # If sending a request to one server fails, try to send it to another, 3 times
  # before aborting the request
  retries 3

	timeout http-request 5s
	timeout connect 5s
  timeout check   10s

  # HTTP Socket timeout
	timeout client  30s
	timeout server  10s

  # WebSocket timeout
  timeout tunnel  3600s
  timeout http-keep-alive  1s
  timeout queue           30s

  # Set the duration for which tarpitted connections will be maintained
  timeout tarpit          60s

	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http


#listen stats
#	bind {{haproxy_bind_stat_ip}}:1936
#	mode http
#	stats enable
#	stats refresh 30s
#	stats hide-version
#	stats scope .
#	stats realm Haproxy\ Statistics
#	stats uri /
#	stats auth user:pass

frontend www-http
   bind {{haproxy_bind_ip}}:80
   redirect scheme https code 301 if !{ ssl_fc }

frontend www-https
  bind {{haproxy_bind_ip}}:443 ssl crt {{ haproxy_ssl_cert }}

  # per evitare problemi con la stick-table
  bind-process 1

  # stick-table type {ip | integer | string [len <length>] | binary [len <length>]}
  #          size <size> [expire <expire>] [nopurge] [peers <peersect>]
  #          [store <data_type>]*
  #Use General Purpose Couter (gpc) 0 in SC1 as a global abuse counter
  #Monitors the number of request sent by an IP over a period of 10 seconds
	# DDOS defence
	stick-table type ip size 200k expire 30s store gpc0,conn_cur,http_req_rate(10s),http_err_rate(10s)

	# Mandatory to build the URL:
	capture request header Host len 32

  # log the beginning of the referrer
  capture request header Referer len 128

  # User agent
  capture request header User-Agent len 128

  # log the URL location during a redirection
  capture response header Location len 20

  # https://www.haproxy.com/doc/aloha/7.0/haproxy/acls.html

  # acl host
{% for d in haproxy.domains %}
{% if d.acl is defined %}
	acl {{d.acl}}     hdr(host) -i {{d.domain}}
{% endif %}
{% endfor %}

  # disabled for security
  acl invalid_method method TRACE

  acl AF src -f /etc/haproxy/geoip/AF.continent.subnets
  acl AN src -f /etc/haproxy/geoip/AN.continent.subnets
  acl AS src -f /etc/haproxy/geoip/AS.continent.subnets
  acl EU src -f /etc/haproxy/geoip/EU.continent.subnets
  acl NA src -f /etc/haproxy/geoip/NA.continent.subnets
  acl OC src -f /etc/haproxy/geoip/OC.continent.subnets
  acl SA src -f /etc/haproxy/geoip/SA.continent.subnets

  #tcp-request content reject if XX

  # path_beg
{% for d in haproxy.domains %}
{% if d.path_beg is defined %}
	acl has_{{d.path_beg}}_uri path_beg /{{d.path_beg}}/
{% endif %}
{% endfor %}

  acl abuser hdr_sub(user-agent) -f /etc/haproxy/abuser.lst

  acl abuse sc1_http_req_rate gt 100
  acl kill sc1_inc_gpc0 gt 10
  acl save sc1_clr_gpc0 ge 0

  acl letsencrypt-acl path_beg /.well-known/acme-challenge/

  # FIXME: valorizzare i badguys (botnet ecc)
  acl badguys src 10.1.0.3 10.16.13.20/28

  # Shut the new connection as long as the client has already 10 opened
  tcp-request connection reject if { src_conn_cur ge 10 }
  tcp-request connection track-sc1 src
  tcp-request inspect-delay 1s

  # Block connection
  tcp-request content reject if abuser
  tcp-request connection accept if !abuse save
  tcp-request connection reject if abuse kill
  tcp-request connection reject if { sc1_get_gpc0 gt 0 }

  http-request deny if invalid_method

  # detect del coutry di provenienza
  http-request set-header X-Country %[src,map_ip(/etc/haproxy/geoip/geoip.lst)]

  # posso anche monitorare determinate situazioni aggiungendo determinati header
  #http-request add-header X-Haproxy-Abuse %ci if connabuse

	# Remove headers that expose security-sensitive information.
	rspidel ^Server:.*$
	rspidel ^X-Powered-By:.*$
	rspidel ^X-AspNet-Version:.*$

  reqitarpit . if badguys

  reqadd X-Forwarded-Proto:\ https

	rspirep ^(set-cookie:.*)  \1;\ Secure

  # HSTS
  rspadd X-XSS-Protection:\ 1;\ mode=block
	rspadd X-Content-Type-Options:\ nosniff
  rspadd X-Frame-Options:\ SAMEORIGIN
  rspadd Strict-Transport-Security:\ max-age={{ max_age_hsts }};\ includeSubDomains
  #rspadd Content-Security-Policy:\ default-src\ 'self';\ script-src\ 'self'\ 'unsafe-inline'\ 'unsafe-eval';\ img-src\ 'self'\ data:;\ style-src\ 'self'\ 'unsafe-inline';\ font-src\ 'self'\ data:;\ frame-src\ 'self';\ connect-src\ 'self'\ object-src\ 'none';\ report-uri\ {{ ocsp_report_uri }}
  #rspadd Public-Key-Pins:\ pin-sha256=\"tAGD4yG3YeEHoYAJRJQkcEppCISVfqtHepfw4EUd3/0=\";\ max-age=10;\ includeSubDomains;\ report-uri\ https://miodominio.com/csp-report.php if ! { capture.req.hdr(0) -i mail.miodominio.com }

{% for r in haproxy.redirects %}
  {% if r.acl is defined %}
	redirect prefix {{r.dest}} code {{r.code}} if {{r.acl}}
  {% endif %}
  {% if r.path_beg is defined %}
  redirect prefix {{r.dest}} code {{r.code}} if {{r.path_beg}}
  {% endif %}
{% endfor %}

{% for d in haproxy.domains %}
{% if d.path_beg is not defined %}
{% if d.backend is defined %}
  {% if d.acl is defined %}
	use_backend {{d.backend.name}} if {{d.acl}}
  {% endif %}
{% endif %}
{% endif %}
{% endfor %}

{% for d in haproxy.domains %}
{% if d.path_beg is defined %}
{% if d.backend is defined %}
	use_backend {{d.backend.name}} if has_{{d.path_beg}}_uri {% if d.acl is defined %}{{d.acl}}{% endif %} #
{% endif %}
{% endif %}
{% endfor %}

  # FIXME: letsencrypt (da gestire)
  # use_backend letsencrypt-backend if letsencrypt-acl

	default_backend {{haproxy.default_backend}}

{% for d in haproxy.domains %}
{% if d.backend is defined %}
backend {{d.backend.name}}
{% for b in d.backend.array %}
	server www-{{loop.index}} {{b.ip}}:{{b.port}} check
{% endfor %}
{% if d.backend.reqirep is defined %}
  reqirep {{d.backend.reqirep}}
{% endif %}
  compression algo gzip
  compression type text/css text/html text/javascript application/javascript text/plain text/xml application/json
  compression offload

  #If the source IP generated 10 or more http request over the defined period,
  #flag the IP as abuser on the frontend
  acl abuse sc1_http_err_rate gt 10
  acl kill sc1_inc_gpc0 gt 0
  tcp-request content reject if abuse kill
{% endif %}
{% endfor %}
